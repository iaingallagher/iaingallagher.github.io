[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "iaingallagher.github.io",
    "section": "",
    "text": "Quarto with Github Pages\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nOct 6, 2022\n\n\nIain J Gallagher\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nApr 4, 2022\n\n\nIain J Gallagher\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/quarto_github_pages/blog_process.html",
    "href": "posts/quarto_github_pages/blog_process.html",
    "title": "Quarto with Github Pages",
    "section": "",
    "text": "Quarto is an “open-source scientific and technical publishing system built on Pandoc”. What does that mean?\nIt means that you can use a simple text file to create documents like blogs, papers, books etc. This blog will be generated using Quarto. Quarto takes simple text files written in markdown and converts those documents into a number of different formats.\nQuarto allows you to embed code written in R, python, julia and Observable JS into your documents and that code will be executable. This makes it easy to share code for analysis or teaching.\nBelow I’ll document how I set up this blog on Github pages using Quarto.\n\n\nFirst you’ll need to have the version control sofware git installed on your system. If you’re not familiar with git then there’s some good teaching here. You’ll also need an account on Github. Github provides a free service called Github pages that allows you to host a free website.\nOnce we have git & Quarto installed and a Github account ready the workflow we’ll follow here is:\n\nCreate a blog repository on Github\nCopy (clone) that repository to our local computer\nCreate a blog in the local repository using Quarto\nCreate content for the blog using Quarto\nPush the content to the online repository\nSet Github pages to serve our blog\n\nOnce we’ve done the first three steps the last three steps can be repeated as we add new blog posts.\nI’m using either Mac OSX or linux as an operating system & we’ll be using the command line (Terminal). If you want to follow the process on Windows you’ll probably need to change a few commands used to make files or change directories from Unix commands to Windows commands. The git and quarto commands will all remain the same.\nFirst go to Github, create a free account and set up the various security options. Install git on your computer. Install Quarto on your computer.\n\n\n\nOn GitHub create a new repo named your_github_username.github.io replacing your_github_username with your actual Github username. Do not add a README or license file just now.\nOn your local computer change to the directory you want to use for your blog and clone the Github repo into that directory.\ncd ~/blog_directory\ngit clone https://github.com/THE_REPO_ADDRESS\nif you’re using https or\ncd ~/blog_directory\ngit clone git@github.com:THE_REPO_ADDRESS\nif you’re using ssh.\nThis will download the files on Github into the local directory. You’ll probably get a warning like:\nwarning: You appear to have cloned an empty repository.\nThat’s ok… you have cloned an empty repository!\n\n\n\nThere are full instructions here.\nChange into the local repo you just cloned.\ncd ~/blog_directory/local_repo\nCreate a local copy of your blog by typing:\nquarto create-project --type website:blog\nQuarto will create several files and directories required to create the blog:\n\n_quarto.yml\nindex.qmd\nabout.qmd\nposts/\nposts/_metadata.yml\nstyles.css\n\nAdd an empty file named .nojekyll at the top level:\ntouch .nojekyll\nThis is required so that Github pages will serve our blog properly later. See the Github pages section here.\nWe also need to set the output directory in the _quarto.yml file so the top of the file reads:\nproject:\n  type: website\n  output-dir: docs\nIf you want to add twitter or github or other social media details you can make edits as required.\n\n\n\nOn the command line type git status. Git will show that all the files/directories created by Quarto are untracked.\nType git add . to start tracking (or stage) all these files.\nType git commit -m \"initialise blog\" to commit all these files to the local git repository.\nNow we can push all these files back up to Github:\ngit push origin main\nOn the GitHub page for your repo go to Settings (top right of the page) & scroll down until you see the section for GitHub pages. Click on the Source (it probably says None) & select Branch: docs. Keep the /root part as /root.\n\nPress save. This tells GitHub Pages to look in the main branch of the project for files to serve.\n\n\n\nGit allows us to create different branches for projects we are working on. At the moment we only have one branch in our blog project - the main branch. For adding content etc we do not want to work on the main branch; we want the main branch to be the destination for code/posts we know we want to publish.\nOn your local machine create a new branch in the repo called e.g. adding-content.\ngit checkout -b adding-content\nAs you create content you will create that content on the adding-content branch. Once you’re happy with that content you can merge the adding-content and main branches. That way you’re never going to ‘break’ the main branch (the stuff you will actually blog) with code/content that doesn’t work.\n\n\n\nIn the directory on your local machine you should now be on the adding-content branch & you can check that with git status.\nThe workflow to create content is to write in markdown and then use the tools in Quarto to render the markdown to html. If you made your blog repo as above with Quarto then Quarto will take care of adding blog posts to the index page of you blog.\nCreate new markdown file; as you’re doing so you can check (approximately) what the page will look like using the Render button in RStudio or VS Code if you’re using either of these for your writing.\nOnce you’re satisfied with the markdown file create a new folder in the /posts directory of your blog repo. Give the folder an informative name.\ncd posts\nmkdir quarto_github_pages\ncp path/to/content.qmd /posts\nMake sure you are in the top level directory of your blog (e.g. YOURNAME.github.io) and type\nquarto preview\nin the terminal to preview the site.\nIf it all looks good press ctrl+c to stop the site being served. We can send the site to the online Github repo.\n\n\n\nTo serve the blog we have to generate html files. We can do this with the Quarto render command.\nTo make sure we do not screw up the main branch move back to the adding-content branch on your local machine.\ngit checkout adding-content\nIn the terminal run the command\nquarto render\nThus will render the whole site and create a new _site directory.\ngit status shows untracked ../../_site\nMake sure that folder is tracked by git.\ngit add ../../_site\ngit commit -m \"useful m\"\ngit push origin adding-content\n\n\n\n\n\n\nThe first time you do this git status should show the docs/ directory as untracked and posts/some_folder/some_file.qmd as staged but not committed. Use git add docs/ and then git add posts/some_folder/some_file.qmd to tell git to track the changes.\nSubsequently git status will only show the folder that has changed or is new in the posts directory. You need to explicitly add the folder and the files inside that folder.\ngit add posts/new_folder\ngit add .\nUse git commit -m \"some informative message\" to commit the changes.\nNow push the repository with the new branch up to Github.\ngit push origin adding-content\nNotice that we push to adding-content NOT to main.\nOn GitHub there should be a pull request generated to pull the changes from adding-content into the main branch. Create the pull request, give it a meaningful message (e.g. ‘post on quarto & github pages’) and then (all going well) merge the pull request into main following the prompts on Github.\nYou should now (well after a few minutes) be able to see your blog at your_github_username.github.io.\nOn your local machine move back to the main branch.\ngit checkout main\nPull the contents of the main branch on Github (which you just updated) down to the local machine.\ngit pull origin main\nSo far we have made sure that our online repo and our local directory and local branches all have the same content."
  },
  {
    "objectID": "posts/quarto_github_pages/blog_process.html#preliminaries",
    "href": "posts/quarto_github_pages/blog_process.html#preliminaries",
    "title": "Quarto with Github Pages",
    "section": "",
    "text": "First you’ll need to have the version control sofware git installed on your system. If you’re not familiar with git then there’s some good teaching here. You’ll also need an account on Github. Github provides a free service called Github pages that allows you to host a free website.\nOnce we have git & Quarto installed and a Github account ready the workflow we’ll follow here is:\n\nCreate a blog repository on Github\nCopy (clone) that repository to our local computer\nCreate a blog in the local repository using Quarto\nCreate content for the blog using Quarto\nPush the content to the online repository\nSet Github pages to serve our blog\n\nOnce we’ve done the first three steps the last three steps can be repeated as we add new blog posts.\nI’m using either Mac OSX or linux as an operating system & we’ll be using the command line (Terminal). If you want to follow the process on Windows you’ll probably need to change a few commands used to make files or change directories from Unix commands to Windows commands. The git and quarto commands will all remain the same.\nFirst go to Github, create a free account and set up the various security options. Install git on your computer. Install Quarto on your computer."
  },
  {
    "objectID": "posts/quarto_github_pages/blog_process.html#github",
    "href": "posts/quarto_github_pages/blog_process.html#github",
    "title": "Quarto with Github Pages",
    "section": "",
    "text": "On GitHub create a new repo named your_github_username.github.io replacing your_github_username with your actual Github username. Do not add a README or license file just now.\nOn your local computer change to the directory you want to use for your blog and clone the Github repo into that directory.\ncd ~/blog_directory\ngit clone https://github.com/THE_REPO_ADDRESS\nif you’re using https or\ncd ~/blog_directory\ngit clone git@github.com:THE_REPO_ADDRESS\nif you’re using ssh.\nThis will download the files on Github into the local directory. You’ll probably get a warning like:\nwarning: You appear to have cloned an empty repository.\nThat’s ok… you have cloned an empty repository!"
  },
  {
    "objectID": "posts/quarto_github_pages/blog_process.html#create-the-blog",
    "href": "posts/quarto_github_pages/blog_process.html#create-the-blog",
    "title": "Quarto with Github Pages",
    "section": "",
    "text": "There are full instructions here.\nChange into the local repo you just cloned.\ncd ~/blog_directory/local_repo\nCreate a local copy of your blog by typing:\nquarto create-project --type website:blog\nQuarto will create several files and directories required to create the blog:\n\n_quarto.yml\nindex.qmd\nabout.qmd\nposts/\nposts/_metadata.yml\nstyles.css\n\nAdd an empty file named .nojekyll at the top level:\ntouch .nojekyll\nThis is required so that Github pages will serve our blog properly later. See the Github pages section here.\nWe also need to set the output directory in the _quarto.yml file so the top of the file reads:\nproject:\n  type: website\n  output-dir: docs\nIf you want to add twitter or github or other social media details you can make edits as required."
  },
  {
    "objectID": "posts/quarto_github_pages/blog_process.html#push-blog-to-github",
    "href": "posts/quarto_github_pages/blog_process.html#push-blog-to-github",
    "title": "Quarto with Github Pages",
    "section": "",
    "text": "On the command line type git status. Git will show that all the files/directories created by Quarto are untracked.\nType git add . to start tracking (or stage) all these files.\nType git commit -m \"initialise blog\" to commit all these files to the local git repository.\nNow we can push all these files back up to Github:\ngit push origin main\nOn the GitHub page for your repo go to Settings (top right of the page) & scroll down until you see the section for GitHub pages. Click on the Source (it probably says None) & select Branch: docs. Keep the /root part as /root.\n\nPress save. This tells GitHub Pages to look in the main branch of the project for files to serve."
  },
  {
    "objectID": "posts/quarto_github_pages/blog_process.html#adding-a-content-branch",
    "href": "posts/quarto_github_pages/blog_process.html#adding-a-content-branch",
    "title": "Quarto with Github Pages",
    "section": "",
    "text": "Git allows us to create different branches for projects we are working on. At the moment we only have one branch in our blog project - the main branch. For adding content etc we do not want to work on the main branch; we want the main branch to be the destination for code/posts we know we want to publish.\nOn your local machine create a new branch in the repo called e.g. adding-content.\ngit checkout -b adding-content\nAs you create content you will create that content on the adding-content branch. Once you’re happy with that content you can merge the adding-content and main branches. That way you’re never going to ‘break’ the main branch (the stuff you will actually blog) with code/content that doesn’t work."
  },
  {
    "objectID": "posts/quarto_github_pages/blog_process.html#adding-content",
    "href": "posts/quarto_github_pages/blog_process.html#adding-content",
    "title": "Quarto with Github Pages",
    "section": "",
    "text": "In the directory on your local machine you should now be on the adding-content branch & you can check that with git status.\nThe workflow to create content is to write in markdown and then use the tools in Quarto to render the markdown to html. If you made your blog repo as above with Quarto then Quarto will take care of adding blog posts to the index page of you blog.\nCreate new markdown file; as you’re doing so you can check (approximately) what the page will look like using the Render button in RStudio or VS Code if you’re using either of these for your writing.\nOnce you’re satisfied with the markdown file create a new folder in the /posts directory of your blog repo. Give the folder an informative name.\ncd posts\nmkdir quarto_github_pages\ncp path/to/content.qmd /posts\nMake sure you are in the top level directory of your blog (e.g. YOURNAME.github.io) and type\nquarto preview\nin the terminal to preview the site.\nIf it all looks good press ctrl+c to stop the site being served. We can send the site to the online Github repo."
  },
  {
    "objectID": "posts/quarto_github_pages/blog_process.html#serving-the-blog",
    "href": "posts/quarto_github_pages/blog_process.html#serving-the-blog",
    "title": "Quarto with Github Pages",
    "section": "",
    "text": "To serve the blog we have to generate html files. We can do this with the Quarto render command.\nTo make sure we do not screw up the main branch move back to the adding-content branch on your local machine.\ngit checkout adding-content\nIn the terminal run the command\nquarto render\nThus will render the whole site and create a new _site directory.\ngit status shows untracked ../../_site\nMake sure that folder is tracked by git.\ngit add ../../_site\ngit commit -m \"useful m\"\ngit push origin adding-content"
  },
  {
    "objectID": "posts/quarto_github_pages/blog_process.html#summary-of-process",
    "href": "posts/quarto_github_pages/blog_process.html#summary-of-process",
    "title": "Quarto with Github Pages",
    "section": "",
    "text": "The first time you do this git status should show the docs/ directory as untracked and posts/some_folder/some_file.qmd as staged but not committed. Use git add docs/ and then git add posts/some_folder/some_file.qmd to tell git to track the changes.\nSubsequently git status will only show the folder that has changed or is new in the posts directory. You need to explicitly add the folder and the files inside that folder.\ngit add posts/new_folder\ngit add .\nUse git commit -m \"some informative message\" to commit the changes.\nNow push the repository with the new branch up to Github.\ngit push origin adding-content\nNotice that we push to adding-content NOT to main.\nOn GitHub there should be a pull request generated to pull the changes from adding-content into the main branch. Create the pull request, give it a meaningful message (e.g. ‘post on quarto & github pages’) and then (all going well) merge the pull request into main following the prompts on Github.\nYou should now (well after a few minutes) be able to see your blog at your_github_username.github.io.\nOn your local machine move back to the main branch.\ngit checkout main\nPull the contents of the main branch on Github (which you just updated) down to the local machine.\ngit pull origin main\nSo far we have made sure that our online repo and our local directory and local branches all have the same content."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  }
]