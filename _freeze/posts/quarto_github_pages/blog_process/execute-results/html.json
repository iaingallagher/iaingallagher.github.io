{
  "hash": "3bb52990b1b345374468834dff864958",
  "result": {
    "markdown": "---\ntitle: \"Quarto with Github Pages\"\nauthor: \"Iain J Gallagher\"\ndate: \"10/06/2022\"\nimage: quarto.png  \ncategories: [news]\nexecute: \n  eval: false\n---\n\n# Github Pages with Quarto\n\n[Quarto](https://quarto.org/) is an \"open-source scientific and technical publishing system built on Pandoc\". What does that mean? \n\nIt means that you can use a simple text file to create documents like blogs, papers, books etc. This blog will be generated using Quarto. Quarto takes simple text files written in [markdown](https://en.wikipedia.org/wiki/Markdown) and converts those documents into a number of different [formats](https://quarto.org/docs/output-formats/all-formats.html).\n\nQuarto allows you to embed code written in [R](https://www.r-project.org/), [python](https://www.python.org/), [julia](https://julialang.org/) and [Observable JS](https://observablehq.com/@d3) into your documents and that code will be executable. This makes it easy to share code for analysis or teaching or reminding yourself how things work!.\n\nBelow I'll document how I set up this blog on [Github pages](https://pages.github.com/) using Quarto.\n\n## Preliminaries\n\nFirst you'll need to have the version control sofware [git](https://git-scm.com/) installed on your system. If you're not familiar with git then there's some good teaching [here](https://www.youtube.com/playlist?list=PL4cUxeGkcC9goXbgTDQ0n_4TBzOO0ocPR). Once you have `git` installed you have to set your identity.\n\n\n```{console}\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"YourEmail@XYZ.com\"\n```\n\n\nThe email you use should be the same one you'll use when you sign up for Github.\n\nYou can also set a default branch for your code. I use `main` for this. This is where the final code for the blog will live.\n\n\n```{console}\ngit config --global init.defaultBranch main\n```\n\n\nYou'll also need an account on [Github](https://github.com/). Github provides a free service called Github pages that allows you to host a free website. \n\nYou'll also need to [install Quarto](https://quarto.org/docs/get-started/). \n\nOnce we have git & Quarto installed and a Github account ready the workflow we'll follow here is:\n\n* Create a blog repository on Github\n* Copy (clone) that repository to our local computer\n* Setup the blog structure in the local repository using Quarto\n* Create content for the blog using Quarto\n* Push the content to the online repository\n\nOnce we've done the first three steps the last two steps can be repeated as we add new blog posts.\n\nI'll be using a Unix based operating system either Mac OSX or linux & we'll be using the command line. If you want to follow the process on Windows you'll probably need to change a few commands used to create files or change directories from Unix commands to Windows commands. The `git` and `quarto` commands will all remain the same.\n\nOnce you have installed git and set up your [git identity](https://git-scm.com/book/en/v2/Getting-Started-First-Time-Git-Setup) go to [Github](https://github.com/), create a free account and set up the various security options. Install [Quarto](https://quarto.org/docs/getting-started) on your computer.\n\n## Github set up\n\nOn Github create a new repo named `your_github_username.github.io` replacing `your_github_username` with your actual Github username. Do not add a README or license file just now. \n\nOn your local computer change to the directory you want to use for your blog and clone the Github repo into that directory.\n\n\n```{console}\ncd ~/blog_directory\ngit clone git@github.com:THE_REPO_ADDRESS\n```\n\n\nif you're using ssh.\n\n\n```{console}\ncd ~/blog_directory\ngit clone https://github.com/THE_REPO_ADDRESS\n```\n\n\nif you're using https.\n\nThis will download the files on Github into the local directory. You'll probably get a warning like:\n\n\n```{console}\nwarning: You appear to have cloned an empty repository.\n```\n\n\nThat's ok... you have cloned an empty repository!\n\n## Create the blog\n\nThere are full instructions [here](https://quarto.org/docs/websites/website-blog.html).\n\nChange into the local repo you just cloned. \n\n\n```{console}\ncd ~/blog_directory/your_github_username.github.io\n```\n\n\nCreate a local copy of your blog by typing:\n\n\n```{console}\nquarto create-project --type website:blog\n```\n\n\nQuarto will create several files and directories required to create the blog:\n\n* _quarto.yml\n* index.qmd\n* about.qmd\n* posts/\n* posts/_metadata.yml\n* styles.css\n\nAdd an empty file named `.nojekyll` at the top level:\n\n\n```{console}\n# change directory\ncd your_github_username.github.io\n# add a file\ntouch .nojekyll\n```\n\n\nThis is required so that Github pages will serve our blog properly later. See the Github pages section [here](https://quarto.org/docs/websites/).\n\nWe also need to set the output directory in the `_quarto.yml` file so the top of the file reads:\n\n\n```{console}\nproject:\n  type: website\n  output-dir: docs\n```\n\n\nIf you want to add social media details you can make edits to the `about.qmd` file (see the webpage above).\n\n## Setting `git` to track the blog\n\nMove into the new directory created by Quarto:\n\n\n```{console}\ncd your_github_username.github.io\n```\n\n\nType `git init`. This will tell `git` to start tracking the files in the blog directory. You can make sure this is working by typing `git status` & `git` should list all the directories and files in the `your_github_username.github.io` directory. You should also see that you are on the `main` branch.\n\n## Adding a content branch\n\nGit allows us to create different branches for projects we are working on. At the moment we only have one branch in our blog project - the `main` branch. For adding content etc we do not want to work on the `main` branch; we want the `main` branch to be the destination for code/posts we know we want to publish.\n\nOn your local machine create a new branch in the repo called e.g. `adding-content`.\n\n```console\ngit checkout -b adding-content\n```\n\nYou should see a message `Switched to a new branch 'adding-content'`.\n\nAs you create content you will create that content on the `adding-content` branch. Once you're happy with that content you can `merge` the `adding-content` and `main` branches. That way you're never going to 'break' the `main` branch (the stuff you will actually blog) with code/content that doesn't work.\n\nBefore we go any further we'll push everything we have done to the `adding-content` branch on our local machine.\n\n\n```{console}\n# make sure we're on the adding-content branch\ngit status\n# add all the files & changes; . means add everything\ngit add .\n# commit the changes to the git repo\ngit commit -m \"started adding-content branch\"\n# check\ngit status\n```\n\n\nYou should see a message:\n\n\n```{console}\nOn branch adding-content\nnothing to commit, working tree clean\n```\n\n\n## Adding content\n\nThe workflow to create content is to write in markdown and then use the tools in Quarto to render the markdown to html. If you made your blog repo as above with Quarto then Quarto will take care of adding blog posts to the index page of your blog. \n\nCreate a new Quarto file written in markdown. As you're doing so you can check what the page will look like using the Render button in [RStudio](https://posit.co/products/open-source/rstudio/) or[VS Code](https://code.visualstudio.com/) if you're using either of these for your writing.\n\nOnce you're satisfied with the markdown file create a new folder in the `/posts` directory of your blog repo. Give the folder an informative name.\n\n\n```{console}\n# change to posts dir\ncd your_github.username.github.io/posts\n# create new dir to hold current content\nmkdir quarto_github_pages\n# move .qmd file to posts/new_dir\ncp path/to/content.qmd posts/quarto_github_pages\n```\n\n\nNow we can add this file to `git`.\n\n\n```{console}\n# check your on adding content\ngit status\n# add the file\ngit add posts/quarto_github_pages/content.qmd\n# commit the file & add a message\ngit commit -m \"added first post to blog\"\n# check all is well\ngit status\n```\n\n\n## Render the site\n\nNow we have some content we can use quarto to render the actual site. Make sure you are in the top level directory of your blog (e.g. `your_github_username.github.io`) and type `quarto preview` to preview the site.\n\nIf it all looks good press `ctrl+c` to stop the site being served. \n\nYou can now render the site with `quarto render`. This will add several new files & directories. \n\nAdd these to the `adding-content` branch following the `git` workflow.\n\n\n```{console}\ngit status # make sure you are on adding-content branch\ngit add .\ngit status\ngit commit -m \"some useful commit message\"\ngit status\n```\n\n\nNow we're ready to send the site to Github.\n\n## Push blog to Github\n\nWe want to push the files we have created to the `adding-content` branch online.\n\n\n```{console}\ngit push origin adding-content\n```\n\n\nGo to [Github](https://github.com/) and log in if you have to. You should see a message that the `adding-content` branch has had content pushed to it.\n\n![Pull request](pull_request.png)\n\nPress the green button and follow the prompts to merge your changes to the `main` branch on Github.\n\nOn the GitHub page for your repo go to Settings (top right of the page) & scroll down until you see the section for GitHub pages. Click on the Source (it probably says `Deploy from a branch`) & select `/docs`.\n\n![Set serve directory](set_pages_source.png)\n\n\nPress save. This tells GitHub Pages to look in the` main` branch of the project and in the `docs` directory for files to serve.\n\n## Syncing online and local\n\nSo far we have made all our changes to the local `adding-content` branch, sent these changes to the `adding-content` branch online and merged those changes with the `main` branch online. Our local `main` branch needs to be synchronised to the online `main` branch.\n\nIn your local blog directory checkout your `main` branch.\n\n\n```{console}\ngit checkout main\n```\n\n\nNow pull the content from the online `main` branch down to your local machine.\n\n\n```{console}\ngit pull origin main\n```\n\n\nYour local `main` branch and your online `main` branch will now be the same.\n\n## Workflow process\n\nA lot of what we did above was once off. For subsequent posts we will:\n\n* Draft content in markdown\n* Track that content on the local `adding-content` branch\n\n\n```{console}\ngit checkout adding-content\ngit status # make sure you're on adding-content\ngit add XYZ\ngit status\ngit commit -m \"some commit message\"\ngit status\n```\n\n\n* Push the `adding-content` branch to Github when we're ready to publish the page\n\n\n```{console}\ngit push origin adding-content\n```\n\n\n* Merge the changes to the `main` branch online using a Github pull request\n\nGithub should automatically serve the page we created.\n\n* Pull the finalised `main` branch from Github back to the local machine\n\n\n```{console}\ngit checkout main   \ngit pull origin main\n```\n\n",
    "supporting": [
      "blog_process_files"
    ],
    "filters": [],
    "includes": {}
  }
}