{
  "hash": "4464037bff51181495876eb0cc0b2198",
  "result": {
    "markdown": "---\ntitle: Hello Data World 3 (julia)\ndate: 09/23/2022\nbibliography: julia_references.bib\ncategories:\n  - julia\neditor_options:\n  chunk_output_type: console\nformat:\n  html:\n    code-overflow: wrap\nimage: julia_logo.png\n---\n\n## Introduction\n\nThis is the third of three posts that will carry out data loading, exploration, filtering and statistical testing using different 'data science' programming languages. In the [first post](https://iaingallagher.github.io/posts/hello_data_r/hello_world_data_R.html) of the series we used [R](https://www.r-project.org); in the [second post](https://iaingallagher.github.io/posts/hello_data_python/hello_world_data_python.html) we used [python](https://www.python.org/). In this post we'll use [julia](https://julialang.org/). I'll add some extra commentary in this post about using julia because it's new and not so familiar (to me anyway). If you want to follow along then the data are [here](https://github.com/iaingallagher/iaingallagher.github.io/tree/main/data).\n\n:::{.callout-tip}\n## 'Time to first plot' problem\nJulia has been designed to be fast as well as having a bunch of other advantages from modern computer science. The speed comes from the use of software called [LLVM](https://llvm.org/) for just-in-time compilation. The developers hope it helps solve the 'two-language problem' where machine learning applications/data science are written in a slow high-level language like R or python and then translated to a fast lower-level language like C++ or Rust for actual use. You can read more about this [here](https://julialang.org/blog/2012/02/why-we-created-julia/). \n\nHowever one consequence of just-in-time compilation is increased latency the first time any function is called because new machine code has to be compiled. In the julia community this is described as the 'time to first plot problem' because it can take a while to generate a plot the first time you call a plotting function (as we'll see later). The time-to-first plot problem makes `julia` like the F1 car in [this video](https://www.youtube.com/watch?v=3RuUp5MT3Uc) (start at ~5.30 if you don't want the whole thing). It starts later but once it gets going it flies along. The julia version used to write this post was version 1.8.5. Latency improvments are [expected](https://twitter.com/vchuravy/status/1607866217259479041) in julia 1.9.\n\nIf all this is gobbledygook then the TLDR is that the first time you do anything in julia in a fresh session it can take a while (especially plotting). Once it's going though it goes very fast.\n::: \n\n### Preliminaries\n\nLike R and python, julia has a host of extra packages to help with data import, wrangling, plotting & building various kinds of models. Julia is a young language in the data science/ numerical computing space. The version 1.0 release was only in 2018. This means that the infrastructure for analysis, data wrangling, plotting etc is not quite as stable as either R or python (although the version 1.0 release helped a lot with this). Julia packages may come and go and may or may not be maintained over the coming years. Everything I've used here (written in 2022) has a good level of support though and these packages should still be in existence in years to come although the exact syntax for usage might change. You can read about how to install julia packages [here](https://docs.julialang.org/en/v1/stdlib/Pkg/).\n\nIn any case the first step is to load the packages we will need. This will also take a while because some code is compiled at load time!\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\n# loading & wrangling data\nusing CSV, DataFrames \n\n# plotting; algebraofgraphics is built on the Makie plotting package\nusing CairoMakie, AlgebraOfGraphics\nCairoMakie.activate!(type = \"svg\") # high quality plots; note use of !\n\n# frequentist stats\nusing HypothesisTests \n\n# bayesian stats\nusing Turing, TuringGLM, ArviZ \n```\n:::\n\n\n### Loading the data\n\nThe `read()` function from the [`CSV`](https://csv.juliadata.org/stable/) package reads in the csv formatted data. The last argument to the function (`DataFrame`) provides a 'sink' for the loaded data i.e. turns the loaded data into a [`DataFrame`](https://dataframes.juliadata.org/stable/) object.\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\n# get data; note defintion of missing values in function call\ndf = CSV.read(\"data/BODY_COMPOSITION_DATA.csv\", header = 1, missingstring = \"NA\", DataFrame)\nfirst(df, 5) # first 5 rows\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div><div style = \"float: left;\"><span>5×10 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">sex</th><th style = \"text-align: left;\">girths</th><th style = \"text-align: left;\">bia</th><th style = \"text-align: left;\">DW</th><th style = \"text-align: left;\">jackson</th><th style = \"text-align: left;\">HW</th><th style = \"text-align: left;\">skinfolds</th><th style = \"text-align: left;\">BMI</th><th style = \"text-align: left;\">WHR</th><th style = \"text-align: left;\">Waist</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"String1\" style = \"text-align: left;\">String1</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Union{Missing, Float64}\" style = \"text-align: left;\">Float64?</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Union{Missing, Float64}\" style = \"text-align: left;\">Float64?</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: left;\">M</td><td style = \"text-align: right;\">10.85</td><td style = \"text-align: right;\">5.7</td><td style = \"text-align: right;\">9.22</td><td style = \"text-align: right;\">4.75</td><td style = \"text-align: right;\">17.0</td><td style = \"text-align: right;\">50.75</td><td style = \"text-align: right;\">20.7</td><td style = \"text-align: right;\">0.8</td><td style = \"text-align: right;\">76.5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: left;\">M</td><td style = \"text-align: right;\">14.12</td><td style = \"text-align: right;\">6.2</td><td style = \"text-align: right;\">11.8</td><td style = \"text-align: right;\">5.5</td><td style = \"text-align: right;\">16.9</td><td style = \"text-align: right;\">46.3</td><td style = \"text-align: right;\">21.9</td><td style = \"text-align: right;\">0.81</td><td style = \"text-align: right;\">75.0</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: left;\">M</td><td style = \"text-align: right;\">12.3</td><td style = \"text-align: right;\">6.3</td><td style = \"text-align: right;\">12.0</td><td style = \"text-align: right;\">5.5</td><td style = \"text-align: right;\">14.8</td><td style = \"text-align: right;\">45.8</td><td style = \"text-align: right;\">21.39</td><td style = \"text-align: right;\">0.73</td><td style = \"text-align: right;\">70.0</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: left;\">M</td><td style = \"text-align: right;\">8.5</td><td style = \"text-align: right;\">6.4</td><td style = \"text-align: right;\">10.85</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">10.2</td><td style = \"text-align: right;\">43.55</td><td style = \"text-align: right;\">19.26</td><td style = \"text-align: right;\">0.74</td><td style = \"text-align: right;\">68.5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: left;\">M</td><td style = \"text-align: right;\">11.66</td><td style = \"text-align: right;\">6.6</td><td style = \"text-align: right;\">15.6</td><td style = \"text-align: right;\">12.0</td><td style = \"text-align: right;\">11.86</td><td style = \"text-align: right;\">93.5</td><td style = \"text-align: right;\">22.3</td><td style = \"text-align: right;\">0.78</td><td style = \"text-align: right;\">74.0</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n### Exploration & tidying\n\nThe `DataFrames` package provides tools for exploring the data. \n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\n#summarise data\ndescribe(df)\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div><div style = \"float: left;\"><span>10×7 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">variable</th><th style = \"text-align: left;\">mean</th><th style = \"text-align: left;\">min</th><th style = \"text-align: left;\">median</th><th style = \"text-align: left;\">max</th><th style = \"text-align: left;\">nmissing</th><th style = \"text-align: left;\">eltype</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Symbol\" style = \"text-align: left;\">Symbol</th><th title = \"Union{Nothing, Float64}\" style = \"text-align: left;\">Union…</th><th title = \"Any\" style = \"text-align: left;\">Any</th><th title = \"Union{Nothing, Float64}\" style = \"text-align: left;\">Union…</th><th title = \"Any\" style = \"text-align: left;\">Any</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Type\" style = \"text-align: left;\">Type</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: left;\">sex</td><td style = \"font-style: italic; text-align: left;\"></td><td style = \"text-align: left;\">F</td><td style = \"font-style: italic; text-align: left;\"></td><td style = \"text-align: left;\">M</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">String1</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: left;\">girths</td><td style = \"text-align: left;\">20.705</td><td style = \"text-align: left;\">7.15</td><td style = \"text-align: left;\">20.12</td><td style = \"text-align: left;\">87.9</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">Float64</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: left;\">bia</td><td style = \"text-align: left;\">16.9797</td><td style = \"text-align: left;\">5.7</td><td style = \"text-align: left;\">16.2</td><td style = \"text-align: left;\">39.3</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">Union{Missing, Float64}</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: left;\">DW</td><td style = \"text-align: left;\">21.6638</td><td style = \"text-align: left;\">4.1</td><td style = \"text-align: left;\">21.4</td><td style = \"text-align: left;\">45.9</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">Float64</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: left;\">jackson</td><td style = \"text-align: left;\">14.2333</td><td style = \"text-align: left;\">3.0</td><td style = \"text-align: left;\">12.8</td><td style = \"text-align: left;\">35.0</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">Float64</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: left;\">HW</td><td style = \"text-align: left;\">21.4243</td><td style = \"text-align: left;\">4.1</td><td style = \"text-align: left;\">21.0</td><td style = \"text-align: left;\">43.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">Union{Missing, Float64}</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: left;\">skinfolds</td><td style = \"text-align: left;\">82.881</td><td style = \"text-align: left;\">27.75</td><td style = \"text-align: left;\">76.23</td><td style = \"text-align: left;\">181.0</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">Float64</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">8</td><td style = \"text-align: left;\">BMI</td><td style = \"text-align: left;\">23.2509</td><td style = \"text-align: left;\">2.9</td><td style = \"text-align: left;\">23.0</td><td style = \"text-align: left;\">33.03</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">Float64</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">9</td><td style = \"text-align: left;\">WHR</td><td style = \"text-align: left;\">0.782105</td><td style = \"text-align: left;\">0.67</td><td style = \"text-align: left;\">0.78</td><td style = \"text-align: left;\">0.99</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">Float64</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">10</td><td style = \"text-align: left;\">Waist</td><td style = \"text-align: left;\">76.8379</td><td style = \"text-align: left;\">61.0</td><td style = \"text-align: left;\">76.0</td><td style = \"text-align: left;\">100.8</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">Float64</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nWe can see from the `nmissing` column that there are missing data in the HW and bia columns. The last column of this output (`eltype`) tells us the type of data we have & where we see `Union{Missing, Float64}` the column of data contains both `Float64` and `Missing` data. \n\nWe can drop the rows containing missing values with the `dropmissing()` function. The `dropmissing!()` variant (i.e. with `!`) means we change the data 'in place'; the actual data we loaded is changed. The use of `!` like this is a common motif in julia to make in-place changes to objects (data, plots, variables etc).\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\n# ! means in-place change\nDataFrames.dropmissing!(df)\ndescribe(df)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div><div style = \"float: left;\"><span>10×7 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">variable</th><th style = \"text-align: left;\">mean</th><th style = \"text-align: left;\">min</th><th style = \"text-align: left;\">median</th><th style = \"text-align: left;\">max</th><th style = \"text-align: left;\">nmissing</th><th style = \"text-align: left;\">eltype</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Symbol\" style = \"text-align: left;\">Symbol</th><th title = \"Union{Nothing, Float64}\" style = \"text-align: left;\">Union…</th><th title = \"Any\" style = \"text-align: left;\">Any</th><th title = \"Union{Nothing, Float64}\" style = \"text-align: left;\">Union…</th><th title = \"Any\" style = \"text-align: left;\">Any</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"DataType\" style = \"text-align: left;\">DataType</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: left;\">sex</td><td style = \"font-style: italic; text-align: left;\"></td><td style = \"text-align: left;\">F</td><td style = \"font-style: italic; text-align: left;\"></td><td style = \"text-align: left;\">M</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">String1</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: left;\">girths</td><td style = \"text-align: left;\">20.7346</td><td style = \"text-align: left;\">7.15</td><td style = \"text-align: left;\">20.12</td><td style = \"text-align: left;\">87.9</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">Float64</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: left;\">bia</td><td style = \"text-align: left;\">16.9801</td><td style = \"text-align: left;\">5.7</td><td style = \"text-align: left;\">15.9</td><td style = \"text-align: left;\">39.3</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">Float64</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: left;\">DW</td><td style = \"text-align: left;\">21.6146</td><td style = \"text-align: left;\">4.1</td><td style = \"text-align: left;\">21.4</td><td style = \"text-align: left;\">45.9</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">Float64</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: left;\">jackson</td><td style = \"text-align: left;\">14.2122</td><td style = \"text-align: left;\">3.0</td><td style = \"text-align: left;\">12.6</td><td style = \"text-align: left;\">35.0</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">Float64</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: left;\">HW</td><td style = \"text-align: left;\">21.4264</td><td style = \"text-align: left;\">4.1</td><td style = \"text-align: left;\">21.0</td><td style = \"text-align: left;\">43.0</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">Float64</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: left;\">skinfolds</td><td style = \"text-align: left;\">82.6848</td><td style = \"text-align: left;\">27.75</td><td style = \"text-align: left;\">76.23</td><td style = \"text-align: left;\">181.0</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">Float64</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">8</td><td style = \"text-align: left;\">BMI</td><td style = \"text-align: left;\">23.223</td><td style = \"text-align: left;\">2.9</td><td style = \"text-align: left;\">23.0</td><td style = \"text-align: left;\">33.03</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">Float64</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">9</td><td style = \"text-align: left;\">WHR</td><td style = \"text-align: left;\">0.781529</td><td style = \"text-align: left;\">0.67</td><td style = \"text-align: left;\">0.78</td><td style = \"text-align: left;\">0.99</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">Float64</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">10</td><td style = \"text-align: left;\">Waist</td><td style = \"text-align: left;\">76.7567</td><td style = \"text-align: left;\">61.0</td><td style = \"text-align: left;\">76.0</td><td style = \"text-align: left;\">100.8</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">Float64</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nThe missing value rows have been removed from the data. Next we will convert our data from wide format to long format [@wickham2014] using the `stack()` function. In long format the values for each individual and each measurement technique are identified by rows rather than spread across row & column combinations. The long data format will make later plotting and statistical analyses easier.\n\n::: {.cell execution_count=5}\n``` {.julia .cell-code}\n# reshape data to long\ndfl = DataFrames.stack(df, 2:10)\n# DataFrames.stack() here because TuringGLM also has a stack function; we need to be explicit about the version of stack() we want to use\nfirst(dfl, 5)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div><div style = \"float: left;\"><span>5×3 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">sex</th><th style = \"text-align: left;\">variable</th><th style = \"text-align: left;\">value</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"String1\" style = \"text-align: left;\">String1</th><th title = \"String\" style = \"text-align: left;\">String</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: left;\">M</td><td style = \"text-align: left;\">girths</td><td style = \"text-align: right;\">10.85</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: left;\">M</td><td style = \"text-align: left;\">girths</td><td style = \"text-align: right;\">14.12</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: left;\">M</td><td style = \"text-align: left;\">girths</td><td style = \"text-align: right;\">12.3</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: left;\">M</td><td style = \"text-align: left;\">girths</td><td style = \"text-align: right;\">8.5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: left;\">M</td><td style = \"text-align: left;\">girths</td><td style = \"text-align: right;\">11.66</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.julia .cell-code}\ndescribe(dfl)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div><div style = \"float: left;\"><span>3×7 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">variable</th><th style = \"text-align: left;\">mean</th><th style = \"text-align: left;\">min</th><th style = \"text-align: left;\">median</th><th style = \"text-align: left;\">max</th><th style = \"text-align: left;\">nmissing</th><th style = \"text-align: left;\">eltype</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Symbol\" style = \"text-align: left;\">Symbol</th><th title = \"Union{Nothing, Float64}\" style = \"text-align: left;\">Union…</th><th title = \"Any\" style = \"text-align: left;\">Any</th><th title = \"Union{Nothing, Float64}\" style = \"text-align: left;\">Union…</th><th title = \"Any\" style = \"text-align: left;\">Any</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"DataType\" style = \"text-align: left;\">DataType</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: left;\">sex</td><td style = \"font-style: italic; text-align: left;\"></td><td style = \"text-align: left;\">F</td><td style = \"font-style: italic; text-align: left;\"></td><td style = \"text-align: left;\">M</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">String1</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: left;\">variable</td><td style = \"font-style: italic; text-align: left;\"></td><td style = \"text-align: left;\">BMI</td><td style = \"font-style: italic; text-align: left;\"></td><td style = \"text-align: left;\">skinfolds</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">String</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: left;\">value</td><td style = \"text-align: left;\">30.9349</td><td style = \"text-align: left;\">0.67</td><td style = \"text-align: left;\">21.6</td><td style = \"text-align: left;\">181.0</td><td style = \"text-align: right;\">0</td><td style = \"text-align: left;\">Float64</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nAs well as data summaries, exploration with plots is an essential step for checking values and the distribution of data. There are quite a few [plotting packages for julia](https://juliapackages.com/c/graphical-plotting) with various general or more specific uses. In this post we'll use the [`Makie`](https://makie.juliaplots.org/stable/) [@danischMakieJlFlexible2021] package which seems to have good mindshare in the julia community, is being actively developed and can cover many different graphical presentation styles. To use `Makie` for faceted plots we can call on the [`AlgebraOfGraphics`](http://juliaplots.org/AlgebraOfGraphics.jl/stable/) package which is built on `Makie`. If you've used `ggplot2` in R then `AlgebraOfGraphics` aims to provide very similar functionality. I tried several other packages (`Gadfly`, `StatsPlots`, `VegaLite`) here as well but I couldn't get any of them to produce a plot I liked. It seems as though production of facet/trellis plots with jittered data points is an area for development in julia!\n\nUnfortunately `AlgebraOfGraphics` doesn't support jittering points (or a beeswarm plot) yet (I think jittering is useful in a plot like this so all the data can be seen) so in the code below we create boxplots rather than jittered points. \n\n::: {.cell execution_count=7}\n``` {.julia .cell-code}\n# faceted boxplot of all variables coloured by Sex\nbxpl = data(dfl) * visual(BoxPlot) * mapping(:sex, :value, color =:sex, layout = :variable) # faceting is defined by layout argument\n# http://juliaplots.org/AlgebraOfGraphics.jl/dev/gallery/gallery/layout/faceting/\ncols = [\"F\" => :firebrick, \"M\" => :cornflowerblue]\n# draw() to show plot\ndraw(bxpl, facet = (;linkyaxes = :none), palettes = (color = cols,), figure=(;resolution=(800,800))) # note trailing comma needed in palettes argument (defines a tuple)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n![](hello_world_data_julia_files/figure-html/cell-8-output-1.svg){}\n:::\n:::\n\n\n:::{.callout-note}\nOn my systems (i7 macbook pro (2015) & i7 linux machine; both 16Gb RAM) this plot takes about 55s... time to first plot problem!\n:::\n\nThere are a couple of mad values in the `BMI` and `girths` variables. For the rest of the analysis we'll concentrate on the `BMI` variable. First we'll filter the data to just BMI and then plot that data.\n\n::: {.cell execution_count=8}\n``` {.julia .cell-code}\n# filter using anonymous function x -> x == \"BMI\"; x where x = BMI\n# https://juliadatascience.io/filter_subset\nbmi = subset(dfl, :variable => ByRow(x -> x == \"BMI\"))\n\n# plot just BMI\nbmipl = data(bmi) * visual(BoxPlot) * mapping(:sex, :value, color = :sex)\ndraw(bmipl, palettes = (color = cols,), figure = (; resolution = (400,400)))\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n![](hello_world_data_julia_files/figure-html/cell-9-output-1.svg){}\n:::\n:::\n\n\nThe unrealistically low value in the male BMI is obvious.\n\nWe'll filter the BMI variable to sensible values for sample (i.e. students) by only including values here BMI is > 18.\n\n::: {.cell execution_count=9}\n``` {.julia .cell-code}\nbmi = filter(:value => x -> x > 18, bmi)\n# redo plot to check\nbmipl = data(bmi) * visual(BoxPlot) * mapping(:sex, :value, color = :sex)\ndraw(bmipl, palettes = (color = cols,), figure = (; resolution = (400,400)))\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n![](hello_world_data_julia_files/figure-html/cell-10-output-1.svg){}\n:::\n:::\n\n\nThe data look much better.\n\n### Frequentist testing\n\nWe're now in a position to undertake some statistical analysis. We'll start with a simple t-test to examine the mean difference in BMI between males and females. The [`HypothesisTesting.jl`](https://juliastats.org/HypothesisTests.jl/stable/) package provides functions for frequentist testing including t-tests. We first extract the data we want to test into separate series and then pass these series to the appropriate function. Here we are using the unequal variance t-test (i.e. Welch's test).\n\n::: {.cell execution_count=10}\n``` {.julia .cell-code}\n# create data vectors\nmdata = filter(:sex => x -> x == \"M\", bmi).value\nfdata  = filter(:sex => x -> x == \"F\", bmi).value\n# carry out test\nres = UnequalVarianceTTest(mdata, fdata)\nres\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\nTwo sample t-test (unequal variance)\n------------------------------------\nPopulation details:\n    parameter of interest:   Mean difference\n    value under h_0:         0\n    point estimate:          0.824192\n    95% confidence interval: (0.055, 1.593)\n\nTest summary:\n    outcome with 95% confidence: reject h_0\n    two-sided p-value:           0.0359\n\nDetails:\n    number of observations:   [118,82]\n    t-statistic:              2.113420475300814\n    degrees of freedom:       192.04757366286913\n    empirical standard error: 0.38998033970175344\n```\n:::\n:::\n\n\nThere is quite a lot of detail here although this is not so different from the R `t.test()` output. The point estimate & p-value are of most interest. We can get just the p-value using the `pvalue()` extractor function passing in the test and tail areas (i.e. one- or two-sided) we want. We can print a rounded p-value using string interpolation with `$(thing_we_want_to_print)`. There doesn't seem to be a function to extract the point estimate though... that would be handy since p-values don't contain point estimate information.\n\n::: {.cell execution_count=11}\n``` {.julia .cell-code}\npv = pvalue(UnequalVarianceTTest(mdata, fdata); tail = :both)\n# print p rounded to 3 dp\nprintln(\"The p-value for the difference in male versus female BMI is $(round(pv, digits = 3)).\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe p-value for the difference in male versus female BMI is 0.036.\n```\n:::\n:::\n\n\nThere's also a `confint()` function for confidence intervals.\n\n::: {.cell execution_count=12}\n``` {.julia .cell-code}\nci = confint(UnequalVarianceTTest(mdata, fdata); tail = :both, level = 0.95)\nprintln(\"The 95% CI for the difference in male versus female BMI is from $(round(ci[1], digits = 3)) to $(round(ci[2], digits = 3)).\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe 95% CI for the difference in male versus female BMI is from 0.055 to 1.593.\n```\n:::\n:::\n\n\nThe 95% CI here ranges from barely different (0.055 units larger) to quite different (1.59 units larger).\n\n### Bayesian testing\n\nLIke R and python julia has a package for the `Stan` probabilistic programming language called [`Stan.jl`](https://github.com/StanJulia/Stan.jl). So one way to write Bayesian models in julia is to use `Stan.jl`. However we'll use a native julia library called [`Turing.jl`](https://turing.ml/stable/) [@geTuringLanguageFlexible2018]. `Turing.jl` allows us to write data generating models and then use Markov Chain Monte Carlo (MCMC) sampling with those model definitions to generate posterior distributions. `Turing.jl` supports a range of MCMC algorithms. In the code below we use the same priors we defined in the posts using R & python.\n\nFirst we create a dummy variable for sex such that males are coded as 1 and females are coded as 0 and we also extract the BMI values into a separate variable.\n\n::: {.cell execution_count=13}\n``` {.julia .cell-code}\n# create dummy vars for sex & get value data\nindep_var = Int64.(bmi.sex .== \"M\"); # vector of 1 & 0's for M & F respectively; the . after Int64 means 'broadcast' i.e. apply to every value in the vector of M/F\n# values\ndep_var = bmi.value;\n```\n:::\n\n\nNext we set up the priors and define the likelihood for the data.\n\n::: {.cell execution_count=14}\n``` {.julia .cell-code}\n#  bayesian model Turing\n#  same priors as R/python\n@model function bayes_bmi(x, y)\n\n\t# priors\n\tα ~ Normal(25, 10) # julia allows unicode characters; \\alpha + TAB\n\tβ ~ Normal(0, 5) # \\beta + TAB\n\t# +ve only Normal dist for residual var\n\tσ ~ truncated(Normal(0, 100), lower = 0) # \\sigma + TAB\n\n\t# likelihood for each y\n\tfor i in 1:length(y)\n\t\ty[i] ~ Normal((α + β * x[i]), σ)\n\tend\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\nbayes_bmi (generic function with 2 methods)\n```\n:::\n:::\n\n\nWe sample from the model we just set up using the `NUTS` algorithm (the same algorithm used by `Stan` by default) to create the posterior distribution.\n\n::: {.cell execution_count=15}\n``` {.julia .cell-code}\n# sample; 1000 is burn in; 0.65 is acceptance rate for samples; 3000 samples; 3 chains; MCMCThreads() required to get > 1 chain\n# note about threads on Turing.jl guide page: \"Be aware that Turing cannot add threads for you – you must have started your Julia instance with multiple threads to experience any kind of parallelism.\"\nbayes_bmi_result = sample(bayes_bmi(indep_var, dep_var), NUTS(1000, 0.65), MCMCThreads(), 3000, 3);\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n┌ Warning: Only a single thread available: MCMC chains are not sampled in parallel\n└ @ AbstractMCMC ~/.julia/packages/AbstractMCMC/F9Hbk/src/sample.jl:296\n┌ Info: Found initial step size\n└   ϵ = 0.003125\n┌ Info: Found initial step size\n└   ϵ = 0.00625\n┌ Info: Found initial step size\n└   ϵ = 0.0125\n\rSampling (1 threads):  67%|███████████████████▍         |  ETA: 0:00:00\rSampling (1 threads): 100%|█████████████████████████████| Time: 0:00:00\n```\n:::\n:::\n\n\nIn the [python post]() we used the `arviz` library [@kumarArviZUnifiedLibrary2019a] to visualise and summarise the distributions. The same library is available for `julia` as [`ArviZ.jl`](https://julia.arviz.org/stable/) and it works in much the same way. In order to examine summaries of the posterior distributions we first convert the `MCMCChains` object from the posterior sampling to an `InferenceData` object.\n\n::: {.cell execution_count=16}\n``` {.julia .cell-code}\n# convert to InferenceData object using ArviZ\nidata_bayes_bmi_result = from_mcmcchains(bayes_bmi_result)\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```{=html}\n<div>InferenceData<details>\n<summary>posterior</summary>\n<pre><code>Dataset with dimensions: Dim{:draw}, Dim{:chain}\nand 3 layers:\n  :α Float64 dims: Dim{:draw}, Dim{:chain} (3000×3)\n  :σ Float64 dims: Dim{:draw}, Dim{:chain} (3000×3)\n  :β Float64 dims: Dim{:draw}, Dim{:chain} (3000×3)\n\nwith metadata Dict{String, Any} with 3 entries:\n  \"created_at\" => \"2023-04-09T11:56:06.92\"\n  \"inference_library_version\" => \"6.0.0\"\n  \"inference_library\" => \"MCMCChains\"</code></pre>\n</details>\n<details>\n<summary>sample_stats</summary>\n<pre><code>Dataset with dimensions: Dim{:draw}, Dim{:chain}\nand 12 layers:\n  :energy           Float64 dims: Dim{:draw}, Dim{:chain} (3000×3)\n  :n_steps          Int64 dims: Dim{:draw}, Dim{:chain} (3000×3)\n  :diverging        Bool dims: Dim{:draw}, Dim{:chain} (3000×3)\n  :max_energy_error Float64 dims: Dim{:draw}, Dim{:chain} (3000×3)\n  :energy_error     Float64 dims: Dim{:draw}, Dim{:chain} (3000×3)\n  :is_accept        Bool dims: Dim{:draw}, Dim{:chain} (3000×3)\n  :log_density      Float64 dims: Dim{:draw}, Dim{:chain} (3000×3)\n  :tree_depth       Int64 dims: Dim{:draw}, Dim{:chain} (3000×3)\n  :step_size        Float64 dims: Dim{:draw}, Dim{:chain} (3000×3)\n  :acceptance_rate  Float64 dims: Dim{:draw}, Dim{:chain} (3000×3)\n  :lp               Float64 dims: Dim{:draw}, Dim{:chain} (3000×3)\n  :step_size_nom    Float64 dims: Dim{:draw}, Dim{:chain} (3000×3)\n\nwith metadata Dict{String, Any} with 3 entries:\n  \"created_at\" => \"2023-04-09T11:56:06.033\"\n  \"inference_library_version\" => \"6.0.0\"\n  \"inference_library\" => \"MCMCChains\"</code></pre>\n</details>\n</div>\n```\n:::\n:::\n\n\nFirst we examine the posterior distributions with traceplots of the MCMC sampling process to make sure the MCMC chains converged.\n\n::: {.cell execution_count=17}\n``` {.julia .cell-code}\nplot_trace(idata_bayes_bmi_result, figsize = (5,6)); # bit annoying that diff plot engines use diff units for fig sizes e.g. px vs inches\n```\n\n::: {.cell-output .cell-output-display}\n![](hello_world_data_julia_files/figure-html/cell-18-output-1.png){}\n:::\n:::\n\n\nThese all look good.\n\nWe can then examine summary data. `ArviZ.jl` uses `summarystats()` rather than `summary()` which is used by `arviz` in `python`.\n\n::: {.cell execution_count=18}\n``` {.julia .cell-code}\n# show summary stats\nsummarystats(idata_bayes_bmi_result, kind = \"stats\", hdi_prob = 0.9)\n# can also get variables explicitly with var_names = \n# summarystats(idata_bayes_bmi_result, var_names = [\"α\", \"β\", \"σ\"], kind = \"stats\", hdi_prob = 0.9)\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```{=html}\n<div><div style = \"float: left;\"><span>3×5 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">variable</th><th style = \"text-align: left;\">mean</th><th style = \"text-align: left;\">sd</th><th style = \"text-align: left;\">hdi_5%</th><th style = \"text-align: left;\">hdi_95%</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"String\" style = \"text-align: left;\">String</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: left;\">α</td><td style = \"text-align: right;\">22.843</td><td style = \"text-align: right;\">0.308</td><td style = \"text-align: right;\">22.352</td><td style = \"text-align: right;\">23.373</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: left;\">σ</td><td style = \"text-align: right;\">2.827</td><td style = \"text-align: right;\">0.143</td><td style = \"text-align: right;\">2.606</td><td style = \"text-align: right;\">3.074</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: left;\">β</td><td style = \"text-align: right;\">0.818</td><td style = \"text-align: right;\">0.402</td><td style = \"text-align: right;\">0.162</td><td style = \"text-align: right;\">1.485</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nFinally we can use `ArviZ` to examine more detailed plots of the posterior distributions.\n\n::: {.cell execution_count=19}\n``` {.julia .cell-code}\nplot_posterior(idata_bayes_bmi_result, grid=(2,2), hdi_prob = 0.9, round_to = 3, figsize = (8,5));\n```\n\n::: {.cell-output .cell-output-display}\n![](hello_world_data_julia_files/figure-html/cell-20-output-1.png){}\n:::\n:::\n\n\nIn order to assess the full posterior for male BMI we can extract the MCMC chains for the intercept and coefficient for `male` and add these together. This returns an `Array` object rather than an `MCMCChains` object. We convert the `Array` to an `InferenceData` object using `convert_to_inference_data()`.\n\n::: {.cell execution_count=20}\n``` {.julia .cell-code}\n# posterior for male bmi\nmale_bmi = idata_bayes_bmi_result.posterior[:α] + idata_bayes_bmi_result.posterior[:β]\n# convert to InferenceData\nmale_bmi = convert_to_inference_data(male_bmi)\n# plot\nplot_posterior(male_bmi, hdi_prob = 0.9, round_to = 3, figsize=(5,5));\n```\n\n::: {.cell-output .cell-output-display}\n![](hello_world_data_julia_files/figure-html/cell-21-output-1.png){}\n:::\n:::\n\n\nWe can generate a summary table as we did above using `ArviZ.jl`.\n\n::: {.cell execution_count=21}\n``` {.julia .cell-code}\nsummarystats(male_bmi, kind = \"stats\", hdi_prob = 0.9)\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```{=html}\n<div><div style = \"float: left;\"><span>1×5 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">variable</th><th style = \"text-align: left;\">mean</th><th style = \"text-align: left;\">sd</th><th style = \"text-align: left;\">hdi_5%</th><th style = \"text-align: left;\">hdi_95%</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"String\" style = \"text-align: left;\">String</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: left;\"></td><td style = \"text-align: right;\">23.661</td><td style = \"text-align: right;\">0.256</td><td style = \"text-align: right;\">23.255</td><td style = \"text-align: right;\">24.09</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nFrom this analysis we'd conclude that the female BMI averages 22.85 and with 90% probability ranges from 22.34 to 23.37. Male BMI is greater with an average of 23.66 (notably greater than the upper limit of the female 90% HDI) and ranging from 23.23 to 24.08 with 90% probability. These values are contingent on the priors we used.\n\nUsing `Turing.jl` we have to type the model out explicitly. If you'd prefer a formula type interface then the [`TuringGLM.jl`](https://beta.turing.ml/TuringGLM.jl/dev/) library can be used to create Bayesian models in a similar manner to `brms` or `rstanarm` in R or `bambi` in python. \n\n:::{.callout-note}\n`TuringGLM` is a work in progress and at the moment has some limitations. For hierarchical models only single random-intercept hierarchical models are supported (so no random slope models).\n\nCurrently `TuringGLM.jl` supports the following likelihoods:\n\n* Normal (the default if not specified): linear regression\n* TDist: robust linear regression\n* Bernoulli: logistic regression\n* Poisson: count data regression\n* NegativeBinomial: robust count data regression where there is overdispersion\n:::\n\nAs before we first have to define the priors we want (although `TuringGLM` does provide default priors as well).\n\n::: {.cell execution_count=22}\n``` {.julia .cell-code}\n# create custom priors\n# turingGLM takes predictors first, then intercept, then auxilliary (e.g. sigma)\n# https://beta.turing.ml/TuringGLM.jl/dev/tutorials/custom_priors/ & ?CustomPrior\npriors = CustomPrior(Normal(0, 5), Normal(25, 10), truncated(Normal(0, 100), lower = 0))\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\nCustomPrior(Normal{Float64}(μ=0.0, σ=5.0), Normal{Float64}(μ=25.0, σ=10.0), Truncated(Normal{Float64}(μ=0.0, σ=100.0); lower=0.0))\n```\n:::\n:::\n\n\nNow we can define the model using a formula interface and `TuringGLM` will take care of the heavy lifting for us.\n\n::: {.cell execution_count=23}\n``` {.julia .cell-code}\n# bayesian model TuringGLM\n# add intercept to formula\nfrm = @formula(value ~ 1 + sex)\n# create model (formula, data; priors)\nturing_bmi_bayes = turing_model(frm, bmi; priors) # formula, data; priors... note comma & semi-colon use\n# sample from model as per Turing above\nturing_bmi_bayes_samples = sample(turing_bmi_bayes, NUTS(1000, 0.65), MCMCThreads(), 3000, 3);\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n┌ Warning: Only a single thread available: MCMC chains are not sampled in parallel\n└ @ AbstractMCMC ~/.julia/packages/AbstractMCMC/F9Hbk/src/sample.jl:296\n┌ Info: Found initial step size\n└   ϵ = 0.00625\n┌ Info: Found initial step size\n└   ϵ = 0.003125\n┌ Info: Found initial step size\n└   ϵ = 0.0015625\n\rSampling (1 threads):  67%|███████████████████▍         |  ETA: 0:00:00\rSampling (1 threads): 100%|█████████████████████████████| Time: 0:00:00\n```\n:::\n:::\n\n\nAfter converting the `MCMCChains` object to an `InferenceData` object we can use `ArviZ` to summarise & plot the posterior distributions.\n\n::: {.cell execution_count=24}\n``` {.julia .cell-code}\n# convert to InferenceData object using ArviZ & shpw summary stats\nidata_turing_bmi_bayes = from_mcmcchains(turing_bmi_bayes_samples)\n# show summary stats; explicit variable selection\nsummarystats(idata_turing_bmi_bayes, var_names = [\"α\", \"β\", \"σ\"] , kind = \"stats\", hdi_prob = 0.9)\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```{=html}\n<div><div style = \"float: left;\"><span>3×5 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">variable</th><th style = \"text-align: left;\">mean</th><th style = \"text-align: left;\">sd</th><th style = \"text-align: left;\">hdi_5%</th><th style = \"text-align: left;\">hdi_95%</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"String\" style = \"text-align: left;\">String</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: left;\">α</td><td style = \"text-align: right;\">22.843</td><td style = \"text-align: right;\">0.315</td><td style = \"text-align: right;\">22.322</td><td style = \"text-align: right;\">23.348</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: left;\">β[1]</td><td style = \"text-align: right;\">0.815</td><td style = \"text-align: right;\">0.409</td><td style = \"text-align: right;\">0.141</td><td style = \"text-align: right;\">1.489</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: left;\">σ</td><td style = \"text-align: right;\">2.82</td><td style = \"text-align: right;\">0.142</td><td style = \"text-align: right;\">2.596</td><td style = \"text-align: right;\">3.059</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nWe can plot the posterior distributions.\n\n::: {.cell execution_count=25}\n``` {.julia .cell-code}\nplot_posterior(idata_turing_bmi_bayes, grid=(2,2), hdi_prob = 0.9, round_to = 3, figsize = (8,10));\n```\n\n::: {.cell-output .cell-output-display}\n![](hello_world_data_julia_files/figure-html/cell-26-output-1.png){}\n:::\n:::\n\n\nWe calculate the posteriors for male BMI as before by extracting the intercept and beta coefficient MCMC samples and adding them together. \n\n::: {.cell execution_count=26}\n``` {.julia .cell-code}\n# calculate male bmi posterior\nturing_male_bmi = idata_turing_bmi_bayes.posterior[:α] + idata_turing_bmi_bayes.posterior[:β] # returns a 3x3000x1 Array, not an MCMCChains object\n# convert to InferenceData\nidata_turing_male_bmi = convert_to_inference_data(turing_male_bmi) # function here is convert_to_inference_data\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```{=html}\n<div>InferenceData<details>\n<summary>posterior</summary>\n<pre><code>Dataset with dimensions: Dim{:draw}, Dim{:chain}, Dim{:β_dim_1}\nand 1 layer:\n  : Float64 dims: Dim{:draw}, Dim{:chain}, Dim{:β_dim_1} (3000×3×1)\n\nwith metadata Dict{String, Any} with 1 entry:\n  \"created_at\" => \"2023-04-09T11:56:28.056\"</code></pre>\n</details>\n</div>\n```\n:::\n:::\n\n\nWe can summarise and plot the distribtion of male BMI as we did above.\n\n::: {.cell execution_count=27}\n``` {.julia .cell-code}\n# summarise the posterior\nsummarystats(idata_turing_male_bmi, kind = \"stats\", hdi_prob = 0.9)\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```{=html}\n<div><div style = \"float: left;\"><span>1×5 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">variable</th><th style = \"text-align: left;\">mean</th><th style = \"text-align: left;\">sd</th><th style = \"text-align: left;\">hdi_5%</th><th style = \"text-align: left;\">hdi_95%</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"String\" style = \"text-align: left;\">String</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: left;\">[1]</td><td style = \"text-align: right;\">23.658</td><td style = \"text-align: right;\">0.262</td><td style = \"text-align: right;\">23.233</td><td style = \"text-align: right;\">24.098</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nNow we can plot the posterior distribution for male BMI.\n\n::: {.cell execution_count=28}\n``` {.julia .cell-code}\n# plot the posterior\nplot_posterior(idata_turing_male_bmi, hdi_prob = 0.9, round_to = 3, figsize = (5,5));\n```\n\n::: {.cell-output .cell-output-display}\n![](hello_world_data_julia_files/figure-html/cell-29-output-1.png){}\n:::\n:::\n\n\nThese results are essetially the same as we got from `Turing.jl` & the results from both Bayesian analyses are essentially the same as those we got from the frequentist analysis. \n\n## Summary\n\nIn this post we have used the `julia` language to load, wrangle, filter and plot some data. We've also seen how to do some basic frequentist and Bayesian inference.\n\n",
    "supporting": [
      "hello_world_data_julia_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}